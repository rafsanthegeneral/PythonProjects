import cv2
import numpy as np
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Email setup function
# def send_email_alert():
#     sender_email = "your_email@example.com"
#     receiver_email = "guardian_email@example.com"
#     password = "your_email_password"

#     message = MIMEMultipart("alternative")
#     message["Subject"] = "Child Movement Alert"
#     message["From"] = sender_email
#     message["To"] = receiver_email

#     text = "Alert: The child has moved out of the designated area."
#     part = MIMEText(text, "plain")
#     message.attach(part)

#     with smtplib.SMTP_SSL("smtp.example.com", 465) as server:
#         server.login(sender_email, password)
#         server.sendmail(sender_email, receiver_email, message.as_string())

# Load the Haar Cascade for face detection
# Load the Haar Cascade for face detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Start video capture from the webcam
cap = cv2.VideoCapture(0)

# Initialize tracker
tracker = cv2.TrackerKCF_create()
initBB = None
tracking = False

# Define a designated area that covers the full frame
frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
boundary_scale = 0.8
boundary_width = int(frame_width * boundary_scale)
boundary_height = int(frame_height * boundary_scale)
boundary_x = (frame_width - boundary_width) // 2
boundary_y = (frame_height - boundary_height) // 2
center_area = (boundary_x, boundary_y, boundary_width, boundary_height)
#center_area = (frame_width // 2, frame_height // 2, frame_width // 2, frame_height // 2)
# cv2.namedWindow('Child Monitoring System', cv2.WND_PROP_FULLSCREEN)
# cv2.setWindowProperty('Child Monitoring System', cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)

while True:
    # Read a frame from the video capture
    ret, frame = cap.read()
    
    if not ret:
        break

    # Convert the frame to grayscale (Haar Cascade works better on grayscale images)
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    
    if initBB is not None:
        # Update the tracker
        success, box = tracker.update(frame)
        
        if success:
            x, y, w, h = [int(v) for v in box]
           
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
           
            # Check if the child is outside the designated area (full frame)
            if x < center_area[0] or x + w > center_area[0] + center_area[2] or \
               y < center_area[1] or y + h > center_area[1] + center_area[3]:
                # send_email_alert()
                print("[-] Out OF Boundary")
                initBB = None  # Reset tracker
                tracking = False
        else:
            initBB = None
            tracking = False
    else:
        # Detect faces in the grayscale frame
        faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
        
        if len(faces) > 0:
            x, y, w, h = faces[0]
            initBB = (x, y, w, h)
            tracker = cv2.TrackerKCF_create()
            tracker.init(frame, initBB)
            tracking = True

    # Draw the designated area (full frame, optional visual aid)
    cv2.rectangle(frame, (center_area[0], center_area[1]), 
                  (center_area[0] + center_area[2], center_area[1] + center_area[3]), (255, 0, 0), 2)

    # Display the frame
    cv2.imshow('Child Monitoring System', frame)
    
    # Break the loop if the 'q' key is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the video capture object and close the display window
cap.release()
cv2.destroyAllWindows()
asd